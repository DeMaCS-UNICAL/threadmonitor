Changelog:

2021/08/06 
- in _StopAndPlay.run(), shared access to controller.isStopped and controller.step was not protected with locks.
  SOLVED by creating the method Controller.checkIfStopped(checkStepsToo : bool) and changing the _StopAndPlay.run() method slightly
- for every instance of the wrapper Lock class, a _StopAndPlay instance is created; this creates unnecessary overhead since they're supposed to be all synchronized
  SOLVED by creating a global instance of the class and making every Lock refer to it
- the animation for the Condition class is bugged and needs to be reworked
- the ConditionTest too, is weirdly designed and could be improved
- the update of isStopped via button clicking is still unsynchronized, may need some work
- occasional crashes on stressTest, still need to identify the cause

2021/08/11
- integrated Sphinx for docs autogeneration:
	- added Sphinx to pipenv dependencies
	- created docs folder with minimal configuration
	- added a few docstring to the existing code to test if the integration is working
  KNOWN ISSUES: 
	- the HTML page is kinda lacking, might need some work
	- sensible to structural changes	
	- still needs testing for different formats (epub, pdf ...)
- renamed the effective module folder from tm_graph to threadmonitor
- added the getResourceFromName() method in the graph_view.py file
- moved _StopAndPlay hierarchy from threading.py to utils.py
- renamed graph_view.py to controllers.py
- added requirements.txt
- added test subdirectory and moved *Test.py there

2021/08/13
- renamed threadmonitor.view.graph_view to threadmonitor.view.tk

2021/08/15
- created model submodule
- updated docs to reflect project changes

2021/08/20
- fixed some problems with test execution
- added the correct method for executing tests in the readme
- (W.I.P.) started implementing some helper functions to reduce boilerplate code in tk.py
  KNOWN ISSUES: too many different params to handle singularly, probably needs variable unpacking?

2021/08/21
- implemented getPhotoImage in tk.py (completed W.I.P. 2021/08/20)
- completed implementing createAndEmplaceButton in tk.py (completed W.I.P. 2021/08/20)

2021/08/23
- created controller submodule and updated docs accordingly
- (W.I.P.) created AbstractContainer in tk.py to generalize: ConditionContainer, _InactiveContainer, _WaitContainer
- KNOWN ISSUES 
    - found dependency between view submodule and wrapper submodule in _InactiveContainer.drawNewThread()
    - the wrapper.threading.Lock.releaseLock (used in drawNewThread) seems to affect the distribution of threads across locks